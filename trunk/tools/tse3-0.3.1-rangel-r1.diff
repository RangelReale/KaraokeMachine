diff -urpN tse3-0.3.1-orig/configure tse3-0.3.1/configure
--- tse3-0.3.1-orig/configure	Tue Aug 23 13:27:34 2005
+++ tse3-0.3.1/configure	Sun Feb 17 18:27:28 2008
@@ -22588,6 +22588,7 @@ fi
 if test "$MINGW32" = "yes"; then
   have_win32="yes"
 fi
+have_win32="yes"
 
 if test "$have_win32" = "yes"; then
   echo "$as_me:$LINENO: result: yes" >&5
diff -urpN tse3-0.3.1-orig/src/examples/midifile/midifile.cpp tse3-0.3.1/src/examples/midifile/midifile.cpp
--- tse3-0.3.1-orig/src/examples/midifile/midifile.cpp	Mon Jul 25 11:22:30 2005
+++ tse3-0.3.1/src/examples/midifile/midifile.cpp	Mon Feb 18 10:31:10 2008
@@ -39,22 +39,79 @@
 #include "tse3/Metronome.h"
 #include "tse3/util/MidiScheduler.h"
 #include "tse3/Transport.h"
+#include "tse3/plt/Win32.h"
+#include "tse3/Playable.h"
 
 // Used in step 3
 #include "tse3/Song.h"
 
+#include <windows.h>
+#include <string>
+
+class mycallback : public TSE3::TransportCallback
+{
+public:
+    std::string Show(TSE3::MidiCommand c) {
+        switch (c.status)
+        {
+        case TSE3::MidiCommand_NoteOff: return "NoteOff"; break;
+        case TSE3::MidiCommand_NoteOn: return "NoteOn"; break;
+        case TSE3::MidiCommand_KeyPressure: return "KeyPressure"; break;
+        case TSE3::MidiCommand_ControlChange: return "ControlChange"; break;
+        case TSE3::MidiCommand_ProgramChange: return "ProgramChange"; break;
+        case TSE3::MidiCommand_ChannelPressure: return "ChannelPressure"; break;
+        case TSE3::MidiCommand_PitchBend: return "PitchBend"; break;
+        case TSE3::MidiCommand_System: return "System"; break;
+
+        // Meta MIDI messages
+        case TSE3::MidiCommand_Invalid: return "Invalid"; break;
+        case TSE3::MidiCommand_TSE_Meta:
+        {
+            switch (c.data1)
+            {
+            case TSE3::MidiCommand_TSE_Meta_Tempo: return "TSE Meta: Tempo"; break;
+            case TSE3::MidiCommand_TSE_Meta_TimeSig: return "TSE Meta: TimeSig"; break;
+            case TSE3::MidiCommand_TSE_Meta_KeySig: return "TSE Meta: KeySig"; break;
+            case TSE3::MidiCommand_TSE_Meta_MoveTo: return "TSE Meta: MoveTo"; break;
+            case TSE3::MidiCommand_TSE_Meta_Text : {
+                return string("TSE Meta: Text = ")+c.str;
+                break;
+            }
+            default:
+                return "TSE Meta"; break;
+            }
+        }
+        case TSE3::MidiCommand_NoteEdit_Meta: return "Noteedit meta"; break;
+        }
+        return "Unknown";
+    }
+
+    virtual void 	Transport_MidiIn (TSE3::MidiCommand c) {
+        std::cout << "MidiIn: " << Show(c) << endl;
+    }
+    virtual void 	Transport_MidiOut (TSE3::MidiCommand c) {
+        if (c.status==TSE3::MidiCommand_TSE_Meta && c.data1==TSE3::MidiCommand_TSE_Meta_Text)
+        {
+            std::cout << c.str << endl;
+        }
+        //std::cout << "MidiOut: " << Show(c) << endl;
+    }
+};
+
+
 int main(int argc, char *argv[])
 {
     if (argc < 2)
     {
         std::cout << "Useage: midifile <filename>\n";
+        exit(1);
     }
 
     /**************************************************************************
      * 1. Load the MIDI file
      *************************************************************************/
 
-    TSE3::MidiFileImport mfi(argv[1]);
+    TSE3::MidiFileImport mfi(argv[1], 2);
 
     /**************************************************************************
      * 2. Create a Transport object to do some playback with
@@ -62,32 +119,43 @@ int main(int argc, char *argv[])
 
     // (You really want to create a MidiScheduler for your platform)
     TSE3::Metronome                 metronome;
-    TSE3::Util::StreamMidiScheduler scheduler;
+    //TSE3::Util::StreamMidiScheduler scheduler;
+    TSE3::Plt::Win32MidiScheduler   scheduler;
     TSE3::Transport                 transport(&metronome, &scheduler);
 
+    //transport.filter()->setPort(scheduler.portNumber(1));
+    transport.filter()->setPort(1);
+
+    //TSE3::Notifier<TSE3::PlayableListener> plisten;
+    //TSE3::Transport::listener_type pl2;
+    //transport.attachTo(&plisten);
+
+    transport.attachCallback(new mycallback);
+
     /**************************************************************************
      * 3. Create a Song object from the file, and play the Song
      *************************************************************************/
 
     TSE3::Song *song = mfi.load();
-
     transport.play(song, 0);
     while (transport.status() != TSE3::Transport::Resting)
     {
         transport.poll();
         // perhaps sleep here to prevent slaughtering the CPU
+        //Sleep(100);
     }
 
     /**************************************************************************
      * 4. The quicker way to just play a MIDI file
      *************************************************************************/
-
+/*
     transport.play(&mfi, 0);
     while (transport.status() != TSE3::Transport::Resting)
     {
         transport.poll();
         // perhaps sleep here to prevent slaughtering the CPU
     }
+*/
 
     /**************************************************************************
      * All done
diff -urpN tse3-0.3.1-orig/src/tse3/Midi.h tse3-0.3.1/src/tse3/Midi.h
--- tse3-0.3.1-orig/src/tse3/Midi.h	Tue Aug 23 12:47:34 2005
+++ tse3-0.3.1/src/tse3/Midi.h	Mon Feb 18 10:17:54 2008
@@ -17,6 +17,9 @@
 #ifndef TSE3_MIDI_H
 #define TSE3_MIDI_H
 
+#include <string>
+#include <memory>
+
 namespace TSE3
 {
     /**
@@ -386,13 +389,16 @@ namespace TSE3
      *                                       holds the time to move to. This
      *                                       is generated by the
      *                                       @ref SongIterator.
+     * @li @p MidiCommand_TSE_Meta_Text    - Data 2 holds the text
+     *                                       See @ref Text.
      */
     enum TSEMetaMidiCommands
     {
         MidiCommand_TSE_Meta_Tempo      = 0x00,
         MidiCommand_TSE_Meta_TimeSig    = 0x01,
         MidiCommand_TSE_Meta_KeySig     = 0x02,
-        MidiCommand_TSE_Meta_MoveTo     = 0x03
+        MidiCommand_TSE_Meta_MoveTo     = 0x03,
+        MidiCommand_TSE_Meta_Text      = 0x0f
     };
 
     /**
@@ -535,7 +541,22 @@ namespace TSE3
         MidiCommand(int status, int channel, int port,
                     int data1, int data2)
             : port(port), status(status), channel(channel),
-              data1(data1), data2(data2), selected(0) {}
+              data1(data1), data2(data2), selected(0), str("") {}
+
+        /**
+         * Construct a MidiCommmand with two data bytes and str
+         *
+         * @param status  Status value (4 bits).
+         * @param channel Channel value (0-15).
+         * @param port    Port value.
+         * @param data1   First data byte value (0-127).
+         * @param data2   Second data byte value (0-127).
+         * @param str     String value.
+         */
+        MidiCommand(int status, int channel, int port,
+                    int data1, int data2, const std::string &str)
+            : port(port), status(status), channel(channel),
+              data1(data1), data2(data2), selected(0), str(str) {}
 
         /**
          * Construct a MidiCommmand with one data byte
@@ -548,14 +569,19 @@ namespace TSE3
         MidiCommand(int status, int channel, int port,
                     int data1)
             : port(port), status(status), channel(channel),
-              data1(data1), data2(0), selected(0) {}
+              data1(data1), data2(0), selected(0), str("") {}
 
         /**
          * Construct a MidiCommand with status MidiCommand_Invalid.
          */
         MidiCommand()
             : port(0), status(MidiCommand_Invalid), channel(0),
-              data1(0), data2(0), selected(0) {}
+              data1(0), data2(0), selected(0), str("") {}
+
+        /**
+         * Deletes str if needed.
+         */
+        //~MidiCommand() { if(str) delete str; }
 
         /**
          * Returns the number of data bytes this type of MidiCommand has.
@@ -622,6 +648,11 @@ namespace TSE3
          * @see Phrase
          */
         unsigned selected : 1;
+
+        /**
+         * The str value.
+         */
+        std::string str;
 
         /**
          * These are some "reserved" port numbers. Valid port numbers
diff -urpN tse3-0.3.1-orig/src/tse3/MidiFile.cpp tse3-0.3.1/src/tse3/MidiFile.cpp
--- tse3-0.3.1-orig/src/tse3/MidiFile.cpp	Mon Jul 25 11:23:00 2005
+++ tse3-0.3.1/src/tse3/MidiFile.cpp	Tue Feb 19 00:00:28 2008
@@ -23,6 +23,7 @@
 #include "tse3/TempoTrack.h"
 #include "tse3/TimeSigTrack.h"
 #include "tse3/KeySigTrack.h"
+#include "tse3/TextTrack.h"
 #include "tse3/PhraseList.h"
 #include "tse3/PhraseEdit.h"
 #include "tse3/Error.h"
@@ -380,6 +381,21 @@ void MidiFileImportIterator::importMeta(
                                          (sf << 4) | mi);
             break;
         }
+        case 0x01: // Text event
+        {
+            std::string text;
+            int n = 0;
+            while (n < length)
+            {
+                text += char(*(mtrkpos[c]++));
+                ++n;
+            }
+            mtrkcommand[c] = MidiCommand(MidiCommand_TSE_Meta, 0, 0,
+                                         MidiCommand_TSE_Meta_Text, 0,
+                                         text);
+            break;
+        }
+
     }
     mtrkpos[c] += length;
 }
@@ -444,6 +460,25 @@ MidiFileImport::MidiFileImport(const std
 : filename(fn), verbose(v), out(o), file(0), fileLastClock(-1)
 {
     std::ifstream in(filename.c_str(), std::ios::binary | std::ios::in);
+    loadStream(in, v, o);
+}
+
+
+MidiFileImport::MidiFileImport(std::istream &in, int v, std::ostream &o)
+: filename(""), verbose(v), out(o), file(0), fileLastClock(-1)
+{
+    loadStream(in, v, o);
+}
+
+
+MidiFileImport::~MidiFileImport()
+{
+    delete [] file;
+}
+
+
+void MidiFileImport::loadStream(std::istream &in, int v, std::ostream &o)
+{
     if (!in.good())
     {
         throw MidiFileImportError("Source MIDI file will not open.");
@@ -481,12 +516,6 @@ MidiFileImport::MidiFileImport(const std
 }
 
 
-MidiFileImport::~MidiFileImport()
-{
-    delete [] file;
-}
-
-
 Song *MidiFileImport::load(Progress *progress)
 {
     Song *song = new Song(0);
@@ -794,7 +823,18 @@ void MidiFileImport::loadMeta(size_t &po
         }
         case 0x01: // Text event
         {
-            if (verbose >= 2) out << "text event (skipping)\n";
+            if (verbose >= 2) out << "text event\n";
+
+            std::string text;
+            int n = 0;
+            while (n < length)
+            {
+                text += char(file[pos+n]);
+                ++n;
+            }
+            song->textTrack()->insert(Event<Text>(Text(text),
+                                        Clock::convert(time, filePPQN)));
+            //out << "text: " << text << "\n";
             break;
         }
         case 0x03: // Sequence/Track name
diff -urpN tse3-0.3.1-orig/src/tse3/MidiFile.h tse3-0.3.1/src/tse3/MidiFile.h
--- tse3-0.3.1-orig/src/tse3/MidiFile.h	Mon Jul 25 11:23:00 2005
+++ tse3-0.3.1/src/tse3/MidiFile.h	Mon Feb 18 23:59:00 2008
@@ -81,6 +81,22 @@ namespace TSE3
             MidiFileImport(const std::string &filename,
                            int                verbose = 0,
                            std::ostream      &out     = std::cout);
+
+            /**
+             * Creates a MidiFileImport object for the given MIDI input stream.
+             *
+             * @param  in 	Input stream of MIDI file to import.
+             * @param  verbose  Level of diagnostic output to produce
+             *                  0: none,
+             *                  1: basic reporting at chunk level
+             *                  2: Include meta information
+             *                  3: list all MIDI commands
+             * @param  out      ostream to produce output on.
+             * @throws MidiFileImportError
+             */
+            MidiFileImport(std::istream &in,
+                           int                verbose = 0,
+                           std::ostream      &out     = std::cout);
             ~MidiFileImport();
 
             /**
@@ -118,6 +134,12 @@ namespace TSE3
             friend class MidiFileImportIterator;
 
         private:
+            /**
+             * Loads the MIDI file from stream
+             */
+            void loadStream(std::istream &in,
+		   int                verbose = 0,
+		   std::ostream      &out     = std::cout);
 
             /**
              * Loads the MIDI file header.
diff -urpN tse3-0.3.1-orig/src/tse3/Song.cpp tse3-0.3.1/src/tse3/Song.cpp
--- tse3-0.3.1-orig/src/tse3/Song.cpp	Mon Jul 25 11:23:00 2005
+++ tse3-0.3.1/src/tse3/Song.cpp	Mon Feb 18 01:55:22 2008
@@ -22,6 +22,7 @@
 #include "tse3/KeySigTrack.h"
 #include "tse3/PhraseList.h"
 #include "tse3/FlagTrack.h"
+#include "tse3/TextTrack.h"
 #include "tse3/FileBlockParser.h"
 #include "tse3/Error.h"
 #include "tse3/Mutex.h"
@@ -174,6 +175,7 @@ namespace
             PlayableIterator               *_tsti;    // TimeSigTrackIterator
             PlayableIterator               *_ksti;    // KeySigTrackIterator
             PlayableIterator               *_rti;     // RepeatIterator
+            PlayableIterator               *_txti;    // TextTrackIterator
             int                             _source;  // where _next came from
 
             /**
@@ -186,7 +188,8 @@ namespace
                 TimeSigTrack = -2,
                 KeySigTrack  = -3,
                 RepeatEvent  = -4,
-                None         = -5
+                TextTrack    = -5,
+                None         = -6
             };
 
         private:
@@ -204,6 +207,7 @@ SongIterator::SongIterator(Song *s, Cloc
     _tsti = _song->timeSigTrack()->iterator(c);
     _ksti = _song->keySigTrack()->iterator(c);
     _rti  = new RepeatIterator(_song, c);
+    _txti  = _song->textTrack()->iterator(c);
     updateIterators(c);
     moveTo(c);
     attachTo(_song);
@@ -218,6 +222,7 @@ SongIterator::~SongIterator()
     delete _tsti;
     delete _ksti;
     delete _rti;
+    delete _txti;
 }
 
 
@@ -244,6 +249,7 @@ void SongIterator::moveTo(Clock c)
     if (_tsti) _tsti->moveTo(c);
     if (_ksti) _ksti->moveTo(c);
     if (_rti)  _rti->moveTo(c);
+    if (_txti)  _txti->moveTo(c);
     std::vector<PlayableIterator*>::iterator i = _ti.begin();
     while (i != _ti.end())
     {
@@ -287,6 +293,13 @@ void SongIterator::getNextEvent()
             ++(*_rti);
         }
     }
+    else if (_source == TextTrack)
+    {
+        if (_txti)
+        {
+            ++(*_txti);
+        }
+    }
     else if (_source != None)
     {
         ++(*(_ti[_source]));
@@ -336,6 +349,16 @@ void SongIterator::getNextEvent()
         }
         _more = true;
     }
+    if (_txti && _txti->more())
+    {
+        MidiEvent tmp = *(*_txti);
+        if (_more == false || tmp.time < _next.time)
+        {
+            _next   = tmp;
+            _source = TextTrack;
+        }
+        _more = true;
+    }
 
     std::vector<PlayableIterator*>::iterator i = _ti.begin();
     int trackNo = 0;
@@ -387,6 +410,7 @@ class TSE3::SongImpl
         TimeSigTrack         timeSigTrack;
         KeySigTrack          keySigTrack;
         FlagTrack            flagTrack;
+        TextTrack           textTrack;
 
         std::vector<Track *> tracks;
         int                  soloTrack; // -1 for no solo
@@ -464,6 +488,10 @@ FlagTrack *Song::flagTrack()
     return &pimpl->flagTrack;
 }
 
+TextTrack *Song::textTrack()
+{
+    return &pimpl->textTrack;
+}
 
 const std::string &Song::title() const
 {
@@ -818,6 +846,8 @@ void Song::save(std::ostream &o, int i) 
     pimpl->keySigTrack.save(o, i+1);
     o << indent(i+1) << "FlagTrack\n";
     pimpl->flagTrack.save(o, i+1);
+    o << indent(i+1) << "TextTrack\n";
+    pimpl->textTrack.save(o, i+1);
     o << indent(i+1) << "SoloTrack:" << soloTrack()              << "\n";
     o << indent(i+1) << "Repeat:";
     if (pimpl->repeat) o << "On\n"; else o << "Off\n";
@@ -883,6 +913,7 @@ void Song::load(std::istream &in, Serial
     parser.add("TimeSigTrack", &pimpl->timeSigTrack);
     parser.add("KeySigTrack",  &pimpl->keySigTrack);
     parser.add("FlagTrack",    &pimpl->flagTrack);
+    parser.add("TextTrack",   &pimpl->textTrack);
     parser.add("Phrase",       &pimpl->phraseList);
     parser.add("Track",        &trackLoader);
     parser.parse(in, info);
diff -urpN tse3-0.3.1-orig/src/tse3/Song.h tse3-0.3.1/src/tse3/Song.h
--- tse3-0.3.1-orig/src/tse3/Song.h	Mon Jul 25 11:23:00 2005
+++ tse3-0.3.1/src/tse3/Song.h	Mon Feb 18 01:25:58 2008
@@ -34,6 +34,7 @@ namespace TSE3
     class KeySigTrack;
     class PhraseList;
     class FlagTrack;
+    class TextTrack;
 
     /**
      * The Song is the container of an entire piece of music. It contains
@@ -125,6 +126,14 @@ namespace TSE3
              * @return Song's @ref FlagTrack
              */
             FlagTrack *flagTrack();
+
+            /**
+             * Returns the Song's @ref TextTrack.
+             *
+             * @return Song's @ref TextTrack
+             */
+            TextTrack *textTrack();
+
 
             /**
              * Read the Song title.
diff -urpN tse3-0.3.1-orig/src/tse3/TextTrack.cpp tse3-0.3.1/src/tse3/TextTrack.cpp
--- tse3-0.3.1-orig/src/tse3/TextTrack.cpp	Thu Jan  1 00:00:00 1970
+++ tse3-0.3.1/src/tse3/TextTrack.cpp	Mon Feb 18 02:45:12 2008
@@ -0,0 +1,263 @@
+/*
+ * @(#)TextTrack.cpp 3.00 17 Feb 2008
+ *
+ * Copyright (c) 2008 Rangel Reale (rreale@bol.com.br)
+ *
+ * This file is part of TSE3 - the Trax Sequencer Engine version 3.00.
+ *
+ * This library is modifiable/redistributable under the terms of the GNU
+ * General Public License.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; see the file COPYING. If not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ */
+
+#include "tse3/TextTrack.h"
+#include "tse3/FileBlockParser.h"
+
+#include <sstream>
+
+using namespace TSE3;
+
+/******************************************************************************
+ * TextTrackIterator class
+ *****************************************************************************/
+
+namespace TSE3
+{
+    /**
+     * The @ref PlayableIterator for the @ref TextTrack class.
+     *
+     * @short   TextTrack PlayableIterator.
+     * @author  Rangel Reale
+     * @version 3.00
+     * @see     PlayableIterator
+     * @see     TextTrack
+     */
+    class TextTrackIterator : public PlayableIterator,
+                               public Listener<TextTrackListener>
+    {
+        public:
+
+            TextTrackIterator(TextTrack *t, Clock c);
+            virtual ~TextTrackIterator();
+            virtual void moveTo(Clock c);
+
+            virtual void EventTrack_EventAltered(EventTrack<Text> *);
+            virtual void EventTrack_EventInserted(EventTrack<Text> *);
+            virtual void EventTrack_EventErased(EventTrack<Text> *);
+            virtual void Notifier_Deleted(EventTrack<Text> *);
+
+        protected:
+
+            virtual void getNextEvent();
+
+            size_t      _pos;
+            TextTrack *_ttrack;
+
+        private:
+
+            TextTrackIterator &operator=(const TextTrackIterator &);
+            TextTrackIterator(const TextTrackIterator &);
+    };
+}
+
+
+TextTrackIterator::TextTrackIterator(TextTrack *t, Clock c)
+: _pos(0), _ttrack(t)
+{
+    moveTo(c);
+    attachTo(_ttrack);
+}
+
+
+TextTrackIterator::~TextTrackIterator()
+{
+}
+
+
+void TextTrackIterator::moveTo(Clock c)
+{
+    if (_ttrack) _pos = _ttrack->index(c);
+    if (!_ttrack || _pos == _ttrack->size() || !_ttrack->status())
+    {
+        _more = false;
+        _next = MidiEvent();
+    }
+    else
+    {
+        _more = true;
+        _next = MidiEvent(MidiCommand(MidiCommand_TSE_Meta, 0, 0,
+                                      MidiCommand_TSE_Meta_Text, 0,
+                                      (*_ttrack)[_pos].data.text),
+                         (*_ttrack)[_pos].time);
+    }
+}
+
+
+void TextTrackIterator::getNextEvent()
+{
+    ++_pos;
+    if (_pos == _ttrack->size())
+    {
+        _more = false;
+        _next = MidiEvent();
+    }
+    else
+    {
+        _more = true;
+        _next = MidiEvent(MidiCommand(MidiCommand_TSE_Meta, 0, 0,
+                                      MidiCommand_TSE_Meta_Text, 0,
+                                      (*_ttrack)[_pos].data.text),
+                         (*_ttrack)[_pos].time);
+    }
+}
+
+
+void TextTrackIterator::EventTrack_EventAltered(EventTrack<Text> *)
+{
+    moveTo(_next.time);
+}
+
+
+void TextTrackIterator::EventTrack_EventInserted(EventTrack<Text> *)
+{
+    moveTo(_next.time);
+}
+
+
+void TextTrackIterator::EventTrack_EventErased(EventTrack<Text> *)
+{
+    moveTo(_next.time);
+}
+
+
+void TextTrackIterator::Notifier_Deleted(EventTrack<Text> *)
+{
+    _ttrack = 0;
+    _more   = false;
+    _next   = MidiEvent();
+}
+
+
+/******************************************************************************
+ * TextTrack class
+ *****************************************************************************/
+
+TextTrack::TextTrack()
+: _status(true)
+{
+    insert(Event<Text>(Text(), 0));
+}
+
+
+TextTrack::~TextTrack()
+{
+}
+
+
+PlayableIterator *TextTrack::iterator(Clock index)
+{
+    return new TextTrackIterator(this, index);
+}
+
+
+Clock TextTrack::lastClock() const
+{
+    return (!data.empty()) ? data[size()-1].time : Clock(0);
+}
+
+/******************************************************************************
+ * TextTrack Serializable interface
+ *****************************************************************************/
+
+void TextTrack::save(std::ostream &o, int i) const
+{
+
+}
+
+void TextTrack::load(std::istream &in, SerializableLoadInfo &info)
+{
+
+}
+
+#if 0
+void TextTrack::save(std::ostream &o, int i) const
+{
+    o << indent(i)   << "{\n";
+    o << indent(i+1) << "Status:";
+    if (_status)
+        o << "On\n";
+    else
+        o << "Off\n";
+    o << indent(i+1) << "Events\n";
+    o << indent(i+1) << "{\n";
+    for (size_t n = 0; n < size(); ++n)
+    {
+        o << indent(i+2) << data[n].time << ":" << data[n].data.text << "\n";
+    }
+    o << indent(i+1) << "}\n";
+    o << indent(i) << "}\n";
+}
+
+
+namespace
+{
+    /**
+     * A catch-all FileItemParser to handle data items in the TextTrack
+     * Events sub-block.
+     */
+    class FileItemParser_Events : public FileItemParser
+    {
+        public:
+            FileItemParser_Events(TextTrack *tt, int PPQN)
+            : tt(tt), PPQN(PPQN) {}
+            virtual void parse(const std::string &line)
+            {
+                int time, tempo;
+                std::istringstream si(line);
+                si >> time;
+                si.ignore(1); // skip colon
+                si >> tempo;
+                time = Clock::convert(time, PPQN);
+                tt->insert(Event<Text>(Tempo(tempo), time));
+            }
+        private:
+            TextTrack *tt;
+            int         PPQN;
+    };
+
+    /**
+     * A simple Serializable class that creates a simple FileBlockParser
+     * to load the Events sub-block of the TextTrack block.
+     */
+    class Events : public Serializable
+    {
+        public:
+            Events(TextTrack *tt)
+            : tt(tt) {}
+            virtual void load(std::istream &in, SerializableLoadInfo &info)
+            {
+                FileItemParser_Events events(tt, info.PPQN);
+                FileBlockParser parser;
+                parser.add(&events);
+                parser.parse(in, info);
+            }
+        private:
+            TextTrack *tt;
+    };
+}
+
+
+void TextTrack::load(std::istream &in, SerializableLoadInfo &info)
+{
+    FileItemParser_OnOff<TextTrack> status(this, &TextTrack::setStatus);
+    Events events(this);
+    FileBlockParser parser;
+    parser.add("Status", &status);
+    parser.add("Events", &events);
+    parser.parse(in, info);
+}
+#endif
diff -urpN tse3-0.3.1-orig/src/tse3/TextTrack.h tse3-0.3.1/src/tse3/TextTrack.h
--- tse3-0.3.1-orig/src/tse3/TextTrack.h	Thu Jan  1 00:00:00 1970
+++ tse3-0.3.1/src/tse3/TextTrack.h	Mon Feb 18 01:21:46 2008
@@ -0,0 +1,137 @@
+/*
+ * @(#)TextTrack.h 3.00 17 Feb 2008
+ *
+ * Copyright (c) 2008 Rangel Reale (rreale@bol.com.br)
+ *
+ * This file is part of TSE3 - the Trax Sequencer Engine version 3.00.
+ *
+ * This library is modifiable/redistributable under the terms of the GNU
+ * General Public License.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; see the file COPYING. If not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ */
+
+#ifndef TSE3_TEXTTRACK_H
+#define TSE3_TEXTTRACK_H
+
+#include "tse3/listen/TextTrack.h"
+
+#include "tse3/Notifier.h"
+#include "tse3/Playable.h"
+#include "tse3/Serializable.h"
+#include "tse3/EventTrack.h"
+
+#include <string>
+
+namespace TSE3
+{
+    /**
+     * Text objects are song lyrics
+     *
+     * This class defines the type that is used to create text events,
+     * which are of type @ref Event<@ref Text>.
+     *
+     * Text is a value type.
+     *
+     * @short   A text (lyrics) event
+     * @author  Rangel Reale
+     * @version 3.00
+     * @see     TextTrack
+     * @see     Event
+     */
+    class Text
+    {
+        public:
+
+            /**
+             * Create a Text.
+             *
+             * @param t Text value
+             */
+            Text(std::string t = "") : text(t) {}
+
+            std::string text;
+
+            int operator==(const Text &f) const { return text == f.text; }
+    };
+
+    /**
+     * The TextTrack provides a simple time ordered list of lyrics
+     * in the @ref Song.
+     *
+     * There is one TextTrack per @ref Song.
+     *
+     * @short   A list of Text events
+     * @author  Rangel Reale
+     * @version 3.00
+     * @see     Event
+     * @see     Text
+     */
+    class TextTrack : public EventTrack<Text>,
+                       public Serializable
+    {
+        public:
+
+            /**
+             * Creates an empty TextTrack.
+             */
+            TextTrack();
+            virtual ~TextTrack();
+
+            /**
+             * Returns the status of the TextTrack.
+             *
+             * A value of true means text events are generated, a value of
+             * false means no text events are generated
+             *
+             * @return TextTrack status
+             * @see    setStatus
+             */
+            bool status() const { return _status; }
+
+            /**
+             * Set the TextTrack status value.
+             *
+             * @param s New status
+             * @see   status
+             */
+            void setStatus(bool s) { _status = s; }
+
+            /**
+             * @reimplemented
+             */
+            virtual PlayableIterator *iterator(Clock index);
+
+            /**
+             * @reimplemented
+             */
+            virtual Clock lastClock() const;
+
+            /**
+             * @reimplemented
+             */
+            virtual void save(std::ostream &o, int i) const;
+
+            /**
+             * @reimplemented
+             */
+            virtual void load(std::istream &i, SerializableLoadInfo &info);
+
+        private:
+
+            TextTrack &operator=(const TextTrack &);
+            TextTrack(const TextTrack &);
+
+            /**
+             * Used by load to read events.
+             */
+            void loadEvents(std::istream &i, int filePPQN);
+
+            bool _status;
+    };
+}
+
+#endif
diff -urpN tse3-0.3.1-orig/src/tse3/Transport.cpp tse3-0.3.1/src/tse3/Transport.cpp
--- tse3-0.3.1-orig/src/tse3/Transport.cpp	Mon Jul 25 11:23:00 2005
+++ tse3-0.3.1/src/tse3/Transport.cpp	Mon Feb 18 01:46:16 2008
@@ -572,6 +572,11 @@ void Transport::pollPlayback()
                             metronome->setBeatsPerBar(e.data.data2 >> 4);
                             break;
                         }
+                        case MidiCommand_TSE_Meta_Text:
+                        {
+                            callback_MidiOut(e.data);
+                            break;
+                        }
                     }
                 }
 
diff -urpN tse3-0.3.1-orig/src/tse3/listen/TextTrack.h tse3-0.3.1/src/tse3/listen/TextTrack.h
--- tse3-0.3.1-orig/src/tse3/listen/TextTrack.h	Thu Jan  1 00:00:00 1970
+++ tse3-0.3.1/src/tse3/listen/TextTrack.h	Mon Feb 18 00:47:56 2008
@@ -0,0 +1,30 @@
+/*
+ * @(#)listen/TextTrack.h 3.00 17 Feb 2008
+ *
+ * Copyright (c) 2008 Rangel Reale (rreale@bol.com.br)
+ *
+ * This file is part of TSE3 - the Trax Sequencer Engine version 3.00.
+ *
+ * This library is modifiable/redistributable under the terms of the GNU
+ * General Public License.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; see the file COPYING. If not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ */
+
+#ifndef TSE3_LISTEN_TEXTTRACK_H
+#define TSE3_LISTEN_TEXTTRACK_H
+
+#include "tse3/listen/EventTrack.h"
+
+namespace TSE3
+{
+    class Text;
+    class TextTrack;
+
+    typedef EventTrackListener<Text> TextTrackListener;
+}
+
+#endif
diff -urpN tse3-0.3.1-orig/src/tse3/plt/Factory_Win32.cpp tse3-0.3.1/src/tse3/plt/Factory_Win32.cpp
--- tse3-0.3.1-orig/src/tse3/plt/Factory_Win32.cpp	Mon Jul 25 11:22:56 2005
+++ tse3-0.3.1/src/tse3/plt/Factory_Win32.cpp	Sun Feb 17 19:25:40 2008
@@ -26,8 +26,48 @@
 
 #include "tse3/Error.h"
 
+using namespace std;
+using namespace TSE3;
 using namespace TSE3::Plt;
 
+/******************************************************************************
+ * Win32 MidiSchedulerFactory class
+ *****************************************************************************/
+
+MidiSchedulerFactory::MidiSchedulerFactory(bool b)
+: _canReturnNull(b)
+{
+}
+
+
+MidiSchedulerFactory::~MidiSchedulerFactory()
+{
+}
+
+
+MidiScheduler *MidiSchedulerFactory::createScheduler()
+{
+    try
+    {
+        Win32MidiScheduler *ms = new Win32MidiScheduler();
+        cout << "Created new Win32MidiScheduler seccussfully\n";
+        return ms;
+    }
+    catch (MidiSchedulerError)
+    {
+        cout << "Failed to create a Win32MidiScheduler\n";
+        if (_canReturnNull)
+        {
+            return new TSE3::Util::NullMidiScheduler();
+        }
+        else
+        {
+            throw;
+        }
+    }
+}
+
+/*
 
 TSE3::MidiSchedulerFactory::MidiSchedulerFactory(bool c)
 : _canReturnNull(c)
@@ -54,4 +94,4 @@ TSE3::MidiScheduler *TSE3::MidiScheduler
     }
 }
 
-
+*/
diff -urpN tse3-0.3.1-orig/src/tse3/plt/OSS.cpp tse3-0.3.1/src/tse3/plt/OSS.cpp
--- tse3-0.3.1-orig/src/tse3/plt/OSS.cpp	Mon Jul 25 11:22:56 2005
+++ tse3-0.3.1/src/tse3/plt/OSS.cpp	Sun Feb 17 17:06:26 2008
@@ -29,7 +29,9 @@
 // These #includes are linux specific and I need to do some autoconf
 // magic to work out how to conditionally include them
 
+#ifdef TSE3_WITH_OSS
 #include <sys/ioctl.h>
+#endif
 
 #ifdef HAVE_LINUX_AWE_VOICE_H
 #include <linux/awe_voice.h>
diff -urpN tse3-0.3.1-orig/src/tse3/plt/Win32.cpp tse3-0.3.1/src/tse3/plt/Win32.cpp
--- tse3-0.3.1-orig/src/tse3/plt/Win32.cpp	Mon Jul 25 11:22:56 2005
+++ tse3-0.3.1/src/tse3/plt/Win32.cpp	Sun Feb 17 23:12:52 2008
@@ -24,6 +24,8 @@
 #include "tse3/Error.h"
 #include "tse3/util/MulDiv.h"
 
+#include "tse3/util/MidiScheduler.h"
+
 #include <windows.h>
 
 using namespace TSE3;
@@ -41,7 +43,7 @@ static char *STR_MOD_UNKNOWN  = "Unknown
 /******************************************************************************
  * Win32 MidiSchedulerFactory class
  *****************************************************************************/
-
+/*
 MidiSchedulerFactory::MidiSchedulerFactory(bool b)
 : _canReturnNull(b)
 {
@@ -61,12 +63,12 @@ MidiScheduler *MidiSchedulerFactory::cre
         cout << "Created new Win32MidiScheduler seccussfully\n";
         return ms;
     }
-    catch (Win32MidiSchedulerException)
+    catch (MidiSchedulerError)
     {
         cout << "Failed to create a Win32MidiScheduler\n";
         if (_canReturnNull)
         {
-            return new NullMidiScheduler();
+            return new TSE3::Util::NullMidiScheduler();
         }
         else
         {
@@ -74,7 +76,7 @@ MidiScheduler *MidiSchedulerFactory::cre
         }
     }
 }
-
+*/
 
 
 /******************************************************************************
@@ -82,7 +84,7 @@ MidiScheduler *MidiSchedulerFactory::cre
  *****************************************************************************/
 
 Win32MidiScheduler::Win32MidiScheduler()
-: hMidi(NULL), nMidi(0)
+: hMidi(NULL), nMidi(0), wstartClock(0)
 {
     unsigned int nMidiIn = midiInGetNumDevs();
     nMidi                = midiOutGetNumDevs() + nMidiIn;
@@ -108,7 +110,7 @@ Win32MidiScheduler::Win32MidiScheduler()
        addPort(i, false, i);
     }
     //    int error = midiOutOpen(&hMidiOut, MIDI_MAPPER, 0, 0, 0);
-    //    if (error != MMSYSERR_NOERROR) 
+    //    if (error != MMSYSERR_NOERROR)
     //      throw TSE3::MidiSchedulerError(MidiSchedulerCreateErr);
 }
 
@@ -132,7 +134,7 @@ Win32MidiScheduler::~Win32MidiScheduler(
 }
 
 
-const char* Win32MidiScheduler::impl_implementationName()
+const char* Win32MidiScheduler::impl_implementationName() const
 {
     return "Win32MidiScheduler version 0.00 [dev].";
 }
@@ -140,7 +142,7 @@ const char* Win32MidiScheduler::impl_imp
 
 const char* Win32MidiScheduler::impl_portName(int port) const
 {
-  if (port > ports()) 
+  if (port > numPorts())
     return NULL;
   else if (port < midiInGetNumDevs()) {
     MIDIINCAPS m;
@@ -155,17 +157,17 @@ const char* Win32MidiScheduler::impl_por
 
 const char* Win32MidiScheduler::impl_portType(int port) const
 {
-  if (port > ports()) return NULL;
+  if (port > numPorts()) return NULL;
   if (port < midiInGetNumDevs()) {
     return "MIDI Input Device";
   } else {
     MIDIOUTCAPS m;
     midiOutGetDevCaps(port - midiInGetNumDevs(), &m, sizeof(m));
     switch(m.wTechnology) {
-       case MOD_FMSYNTH:   return STR_MOD_FMSYNTH; 
-       case MOD_MAPPER:    return STR_MOD_MAPPER; 
-       case MOD_MIDIPORT:  return STR_MOD_MIDIPORT; 
-       case MOD_SQSYNTH:   return STR_MOD_SQSYNTH; 
+       case MOD_FMSYNTH:   return STR_MOD_FMSYNTH;
+       case MOD_MAPPER:    return STR_MOD_MAPPER;
+       case MOD_MIDIPORT:  return STR_MOD_MIDIPORT;
+       case MOD_SQSYNTH:   return STR_MOD_SQSYNTH;
        case MOD_SYNTH:     return STR_MOD_SYNTH;
        default:            return STR_MOD_UNKNOWN;
     }
@@ -194,7 +196,7 @@ void Win32MidiScheduler::impl_tx(MidiCom
 //    midiShortMsg((int)mc);
 }
 
-void Win32MidiScheduler::impl_runMidiData(HMIDIOUT o, MidiCommand mc) {
+void Win32MidiScheduler::runMidiData(HMIDIOUT o, MidiCommand mc) {
   union {
     DWORD dwData;
     BYTE  bData[4];
@@ -210,12 +212,12 @@ void Win32MidiScheduler::impl_runMidiDat
 
 void Win32MidiScheduler::impl_start(Clock s)
 {
-    if (!_running) {
+    if (!running()) {
        TIMECAPS timecaps;
        timeGetDevCaps(&timecaps, sizeof(timecaps));
        timeBeginPeriod(10);
 
-       startTime = timeGetTime();
+       wstartClock = timeGetTime();
        clockStarted(s);
     }
 }
@@ -223,12 +225,14 @@ void Win32MidiScheduler::impl_start(Cloc
 
 void Win32MidiScheduler::impl_stop(Clock t)
 {
-    if (!_running) return;
+    if (!running()) return;
+/*
     if (t != -1) {
       restingClock = t;
     } else {
       restingClock = clock();
     }
+*/
     timeEndPeriod(10);
     clockStopped(t);
 }
@@ -242,14 +246,15 @@ void Win32MidiScheduler::impl_moveTo(Clo
 
 Clock Win32MidiScheduler::impl_clock()
 {
-    int time = timeGetTime() - startTime;
+    int time = timeGetTime() - wstartClock;
     return msToClock(time);
 }
 
 
 int Win32MidiScheduler::impl_msecs()
 {
-    return timeGetTime() - startTime;
+    return timeGetTime() - wstartClock;
+    //return timeGetTime();
 }
 
 
@@ -285,8 +290,7 @@ struct CallbackData
   Win32MidiScheduler* sch;
 };
 
-
-void Win32MidiScheduler::impl_callback(UINT uID,    UINT uMsg, 
+void Win32MidiScheduler::callback(UINT uID,    UINT uMsg,
                                   DWORD _data, DWORD dw1, DWORD dw2)
 {
   CallbackData *data = (CallbackData*) _data;
@@ -294,13 +298,12 @@ void Win32MidiScheduler::impl_callback(U
   delete data;
 }
 
-
 void Win32MidiScheduler::impl_tx(MidiEvent e)
 {
-  unsigned int msecs = clockToMs(e.time);  
+  unsigned int msecs = clockToMs(e.time);
   if (msecs > timeGetTime()) {
-    if (  e.data.port < midiInGetNumDevs() 
-       || e.data.port > ports()) 
+    if (  e.data.port < midiInGetNumDevs()
+       || e.data.port > numPorts())
           return;
     CallbackData* data = new CallbackData;
     data->port = hMidi[e.data.port].out;
diff -urpN tse3-0.3.1-orig/src/tse3/plt/Win32.h tse3-0.3.1/src/tse3/plt/Win32.h
--- tse3-0.3.1-orig/src/tse3/plt/Win32.h	Mon Jul 25 11:22:56 2005
+++ tse3-0.3.1/src/tse3/plt/Win32.h	Sun Feb 17 23:12:18 2008
@@ -20,6 +20,8 @@
 #include "tse3/MidiScheduler.h"
 #include <Windows.h>
 
+using namespace std;
+
 namespace TSE3
 {
     namespace Plt
@@ -41,7 +43,7 @@ namespace TSE3
                 /**
                  * Creates the Win32MidiScheduler object.
                  */
-                Win32MidiScheduler(); // throw (Win32MidiSchedulerException); 
+                Win32MidiScheduler(); // throw (Win32MidiSchedulerException);
                 virtual ~Win32MidiScheduler();
 
             protected:
@@ -122,10 +124,12 @@ namespace TSE3
               };
               HMIDI   *hMidi;
               UINT     nMidi;
+              Clock wstartClock;
 
               void runMidiData(HMIDIOUT, MidiCommand);
-              static void callback(UINT, UINT, DWORD, DWORD, DWORD); 
+	      static CALLBACK void callback(UINT, UINT, DWORD, DWORD, DWORD);
         };
+
     }
 }
 
diff -urpN tse3-0.3.1-orig/src/tse3play/tse3play.cpp tse3-0.3.1/src/tse3play/tse3play.cpp
--- tse3-0.3.1-orig/src/tse3play/tse3play.cpp	Tue Aug 23 12:58:36 2005
+++ tse3-0.3.1/src/tse3play/tse3play.cpp	Sun Feb 17 19:42:00 2008
@@ -49,6 +49,9 @@
 #include "tse3/plt/Arts.h"
 #endif
 
+#ifdef __WIN32__
+  #include <windows.h>
+#endif //__WIN32
 #include <unistd.h> // for usleep
 //#include <time.h> // for nanosleep
 
@@ -560,7 +563,19 @@ int TSE3Play::go()
                 // then set more_to_come = false;
                 if (usleepPeriod)
                 {
+#ifdef __WIN32__
+		   /* On Windows, round to the nearest millisecond, with a
+		    * minimum of 1 millisecond if usleep was called with a
+		    * a non-zero value. */
+		   if (usleepPeriod > 500)
+		    Sleep ((usleepPeriod+500)/1000);
+		   else if (usleepPeriod > 0)
+		     Sleep (1);
+		   else
+		     Sleep (0);                    
+#else                    
                     usleep(usleepPeriod);
+#endif                    
                     //timespec a = {0, usleepPeriod*10}, b;
                     //nanosleep(&a, &b);
                 }
